// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package call_dw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CallDwClient is the client API for CallDw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallDwClient interface {
	FindCallSetting(ctx context.Context, in *ChannelId, opts ...grpc.CallOption) (*CallSetting, error)
}

type callDwClient struct {
	cc grpc.ClientConnInterface
}

func NewCallDwClient(cc grpc.ClientConnInterface) CallDwClient {
	return &callDwClient{cc}
}

func (c *callDwClient) FindCallSetting(ctx context.Context, in *ChannelId, opts ...grpc.CallOption) (*CallSetting, error) {
	out := new(CallSetting)
	err := c.cc.Invoke(ctx, "/call_dw.CallDw/FindCallSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallDwServer is the server API for CallDw service.
// All implementations must embed UnimplementedCallDwServer
// for forward compatibility
type CallDwServer interface {
	FindCallSetting(context.Context, *ChannelId) (*CallSetting, error)
	mustEmbedUnimplementedCallDwServer()
}

// UnimplementedCallDwServer must be embedded to have forward compatible implementations.
type UnimplementedCallDwServer struct {
}

func (UnimplementedCallDwServer) FindCallSetting(context.Context, *ChannelId) (*CallSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCallSetting not implemented")
}
func (UnimplementedCallDwServer) mustEmbedUnimplementedCallDwServer() {}

// UnsafeCallDwServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallDwServer will
// result in compilation errors.
type UnsafeCallDwServer interface {
	mustEmbedUnimplementedCallDwServer()
}

func RegisterCallDwServer(s grpc.ServiceRegistrar, srv CallDwServer) {
	s.RegisterService(&CallDw_ServiceDesc, srv)
}

func _CallDw_FindCallSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallDwServer).FindCallSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/call_dw.CallDw/FindCallSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallDwServer).FindCallSetting(ctx, req.(*ChannelId))
	}
	return interceptor(ctx, in, info, handler)
}

// CallDw_ServiceDesc is the grpc.ServiceDesc for CallDw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallDw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "call_dw.CallDw",
	HandlerType: (*CallDwServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindCallSetting",
			Handler:    _CallDw_FindCallSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "call_dw/call_dw.proto",
}
