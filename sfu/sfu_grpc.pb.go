// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sfu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SfuClient is the client API for Sfu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SfuClient interface {
	SfuWebRtcRelay(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Sfu_SfuWebRtcRelayClient, error)
}

type sfuClient struct {
	cc grpc.ClientConnInterface
}

func NewSfuClient(cc grpc.ClientConnInterface) SfuClient {
	return &sfuClient{cc}
}

func (c *sfuClient) SfuWebRtcRelay(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Sfu_SfuWebRtcRelayClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sfu_ServiceDesc.Streams[0], "/sfu.Sfu/SfuWebRtcRelay", opts...)
	if err != nil {
		return nil, err
	}
	x := &sfuSfuWebRtcRelayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sfu_SfuWebRtcRelayClient interface {
	Recv() (*WebRtcRelay, error)
	grpc.ClientStream
}

type sfuSfuWebRtcRelayClient struct {
	grpc.ClientStream
}

func (x *sfuSfuWebRtcRelayClient) Recv() (*WebRtcRelay, error) {
	m := new(WebRtcRelay)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SfuServer is the server API for Sfu service.
// All implementations must embed UnimplementedSfuServer
// for forward compatibility
type SfuServer interface {
	SfuWebRtcRelay(*SubscribeRequest, Sfu_SfuWebRtcRelayServer) error
	mustEmbedUnimplementedSfuServer()
}

// UnimplementedSfuServer must be embedded to have forward compatible implementations.
type UnimplementedSfuServer struct {
}

func (UnimplementedSfuServer) SfuWebRtcRelay(*SubscribeRequest, Sfu_SfuWebRtcRelayServer) error {
	return status.Errorf(codes.Unimplemented, "method SfuWebRtcRelay not implemented")
}
func (UnimplementedSfuServer) mustEmbedUnimplementedSfuServer() {}

// UnsafeSfuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SfuServer will
// result in compilation errors.
type UnsafeSfuServer interface {
	mustEmbedUnimplementedSfuServer()
}

func RegisterSfuServer(s grpc.ServiceRegistrar, srv SfuServer) {
	s.RegisterService(&Sfu_ServiceDesc, srv)
}

func _Sfu_SfuWebRtcRelay_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SfuServer).SfuWebRtcRelay(m, &sfuSfuWebRtcRelayServer{stream})
}

type Sfu_SfuWebRtcRelayServer interface {
	Send(*WebRtcRelay) error
	grpc.ServerStream
}

type sfuSfuWebRtcRelayServer struct {
	grpc.ServerStream
}

func (x *sfuSfuWebRtcRelayServer) Send(m *WebRtcRelay) error {
	return x.ServerStream.SendMsg(m)
}

// Sfu_ServiceDesc is the grpc.ServiceDesc for Sfu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sfu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sfu.Sfu",
	HandlerType: (*SfuServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SfuWebRtcRelay",
			Handler:       _Sfu_SfuWebRtcRelay_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sfu/sfu.proto",
}
