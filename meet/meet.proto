syntax = "proto3";

option go_package = "github.com/channel-io/ch-proto/meet";
option java_package = "io.channel.api.proto";
option java_multiple_files = true;

package meet;

service MeetService {
  rpc CreateInboundMeet(InboundMeetRequest) returns (InboundMeetResponse) {
  }
  rpc CreateOutboundMeet(OutboundMeetRequest) returns (BareResponse) {
  }
  rpc LeaveMeetByUser(LeaveMeetRequest) returns (BareResponse) {
  }
  rpc LeaveMeetByManager(LeaveMeetRequest) returns (BareResponse) {
  }
  rpc AddPeers(AddPeersRequest) returns (AddPeersResponse) {
  }
  rpc JoinMeetByUser(JoinMeetRequest) returns (BareResponse) {
  }
  rpc JoinMeetByManager(JoinMeetRequest) returns (BareResponse) {
  }
  rpc CloseMeet(CloseMeetRequest) returns (BareResponse) {
  }
}

enum ResponseCode {
  SUCCESS = 0;
  UNAUTHORIZED = 1;
  FORBIDDEN = 2;
  NOT_FOUND = 3;
}

message BareResponse {
  ResponseCode response_code = 1;
}

message GuideVoice {
  string name = 1;
  string url = 2;
}

message CloseMeetRequest {
  string meet_id = 1;
  oneof response {
    bool has_guide_voice = 2;
    GuideVoice guide_voice = 3;
  }
}

message Person {
  string person_id = 1;
  string person_type = 2;
}

message JoinMeetRequest {
  Person person = 1;
  string meet_id = 2;
}

message AddPeersRequest {
  repeated Person persons = 1;
  string meet_id = 2;
}

message AddPeersResponse {
  ResponseCode response_code = 1;
  string meet_id = 2;
}

message InboundMeetRequest {
  string from = 1;
  string to = 2;
  string carrier = 3;
  string sfu_server_id = 4;
}

message InboundMeetResponse {
  ResponseCode response_code = 1;
  string meet_id = 2;
}

message OutboundMeetRequest {
  string meet_id = 1;
  string from = 2;
  string to = 3;
  string carrier = 4;
}

message LeaveMeetRequest {
  Person person = 1;
  string meet_id = 2;
}
