// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package meet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeetServiceClient is the client API for MeetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeetServiceClient interface {
	// sfu -> dw
	CreateInboundCallMeet(ctx context.Context, in *InboundCallRequest, opts ...grpc.CallOption) (*MeetId, error)
	// dw -> sfu
	CreateOutboundCallMeet(ctx context.Context, in *OutboundCallRequest, opts ...grpc.CallOption) (*MeetId, error)
}

type meetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetServiceClient(cc grpc.ClientConnInterface) MeetServiceClient {
	return &meetServiceClient{cc}
}

func (c *meetServiceClient) CreateInboundCallMeet(ctx context.Context, in *InboundCallRequest, opts ...grpc.CallOption) (*MeetId, error) {
	out := new(MeetId)
	err := c.cc.Invoke(ctx, "/meet.MeetService/CreateInboundCallMeet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetServiceClient) CreateOutboundCallMeet(ctx context.Context, in *OutboundCallRequest, opts ...grpc.CallOption) (*MeetId, error) {
	out := new(MeetId)
	err := c.cc.Invoke(ctx, "/meet.MeetService/CreateOutboundCallMeet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeetServiceServer is the server API for MeetService service.
// All implementations must embed UnimplementedMeetServiceServer
// for forward compatibility
type MeetServiceServer interface {
	// sfu -> dw
	CreateInboundCallMeet(context.Context, *InboundCallRequest) (*MeetId, error)
	// dw -> sfu
	CreateOutboundCallMeet(context.Context, *OutboundCallRequest) (*MeetId, error)
	mustEmbedUnimplementedMeetServiceServer()
}

// UnimplementedMeetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeetServiceServer struct {
}

func (UnimplementedMeetServiceServer) CreateInboundCallMeet(context.Context, *InboundCallRequest) (*MeetId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInboundCallMeet not implemented")
}
func (UnimplementedMeetServiceServer) CreateOutboundCallMeet(context.Context, *OutboundCallRequest) (*MeetId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOutboundCallMeet not implemented")
}
func (UnimplementedMeetServiceServer) mustEmbedUnimplementedMeetServiceServer() {}

// UnsafeMeetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeetServiceServer will
// result in compilation errors.
type UnsafeMeetServiceServer interface {
	mustEmbedUnimplementedMeetServiceServer()
}

func RegisterMeetServiceServer(s grpc.ServiceRegistrar, srv MeetServiceServer) {
	s.RegisterService(&MeetService_ServiceDesc, srv)
}

func _MeetService_CreateInboundCallMeet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InboundCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).CreateInboundCallMeet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meet.MeetService/CreateInboundCallMeet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).CreateInboundCallMeet(ctx, req.(*InboundCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetService_CreateOutboundCallMeet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutboundCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).CreateOutboundCallMeet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meet.MeetService/CreateOutboundCallMeet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).CreateOutboundCallMeet(ctx, req.(*OutboundCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeetService_ServiceDesc is the grpc.ServiceDesc for MeetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meet.MeetService",
	HandlerType: (*MeetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInboundCallMeet",
			Handler:    _MeetService_CreateInboundCallMeet_Handler,
		},
		{
			MethodName: "CreateOutboundCallMeet",
			Handler:    _MeetService_CreateOutboundCallMeet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meet/meet.proto",
}
