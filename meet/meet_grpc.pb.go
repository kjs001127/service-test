// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package meet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeetServiceClient is the client API for MeetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeetServiceClient interface {
	CreateInboundMeet(ctx context.Context, in *InboundMeetRequest, opts ...grpc.CallOption) (*InboundMeetResponse, error)
	CreateOutboundMeet(ctx context.Context, in *OutboundMeetRequest, opts ...grpc.CallOption) (*BareResponse, error)
	LeaveMeetByUser(ctx context.Context, in *LeaveMeetRequest, opts ...grpc.CallOption) (*BareResponse, error)
	LeaveMeetByManager(ctx context.Context, in *LeaveMeetRequest, opts ...grpc.CallOption) (*BareResponse, error)
	AddPeers(ctx context.Context, in *AddPeersRequest, opts ...grpc.CallOption) (*AddPeersResponse, error)
	JoinMeetByUser(ctx context.Context, in *JoinMeetRequest, opts ...grpc.CallOption) (*BareResponse, error)
	JoinMeetByManager(ctx context.Context, in *JoinMeetRequest, opts ...grpc.CallOption) (*BareResponse, error)
	CloseMeet(ctx context.Context, in *CloseMeetRequest, opts ...grpc.CallOption) (*BareResponse, error)
}

type meetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetServiceClient(cc grpc.ClientConnInterface) MeetServiceClient {
	return &meetServiceClient{cc}
}

func (c *meetServiceClient) CreateInboundMeet(ctx context.Context, in *InboundMeetRequest, opts ...grpc.CallOption) (*InboundMeetResponse, error) {
	out := new(InboundMeetResponse)
	err := c.cc.Invoke(ctx, "/meet.MeetService/CreateInboundMeet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetServiceClient) CreateOutboundMeet(ctx context.Context, in *OutboundMeetRequest, opts ...grpc.CallOption) (*BareResponse, error) {
	out := new(BareResponse)
	err := c.cc.Invoke(ctx, "/meet.MeetService/CreateOutboundMeet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetServiceClient) LeaveMeetByUser(ctx context.Context, in *LeaveMeetRequest, opts ...grpc.CallOption) (*BareResponse, error) {
	out := new(BareResponse)
	err := c.cc.Invoke(ctx, "/meet.MeetService/LeaveMeetByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetServiceClient) LeaveMeetByManager(ctx context.Context, in *LeaveMeetRequest, opts ...grpc.CallOption) (*BareResponse, error) {
	out := new(BareResponse)
	err := c.cc.Invoke(ctx, "/meet.MeetService/LeaveMeetByManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetServiceClient) AddPeers(ctx context.Context, in *AddPeersRequest, opts ...grpc.CallOption) (*AddPeersResponse, error) {
	out := new(AddPeersResponse)
	err := c.cc.Invoke(ctx, "/meet.MeetService/AddPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetServiceClient) JoinMeetByUser(ctx context.Context, in *JoinMeetRequest, opts ...grpc.CallOption) (*BareResponse, error) {
	out := new(BareResponse)
	err := c.cc.Invoke(ctx, "/meet.MeetService/JoinMeetByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetServiceClient) JoinMeetByManager(ctx context.Context, in *JoinMeetRequest, opts ...grpc.CallOption) (*BareResponse, error) {
	out := new(BareResponse)
	err := c.cc.Invoke(ctx, "/meet.MeetService/JoinMeetByManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetServiceClient) CloseMeet(ctx context.Context, in *CloseMeetRequest, opts ...grpc.CallOption) (*BareResponse, error) {
	out := new(BareResponse)
	err := c.cc.Invoke(ctx, "/meet.MeetService/CloseMeet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeetServiceServer is the server API for MeetService service.
// All implementations must embed UnimplementedMeetServiceServer
// for forward compatibility
type MeetServiceServer interface {
	CreateInboundMeet(context.Context, *InboundMeetRequest) (*InboundMeetResponse, error)
	CreateOutboundMeet(context.Context, *OutboundMeetRequest) (*BareResponse, error)
	LeaveMeetByUser(context.Context, *LeaveMeetRequest) (*BareResponse, error)
	LeaveMeetByManager(context.Context, *LeaveMeetRequest) (*BareResponse, error)
	AddPeers(context.Context, *AddPeersRequest) (*AddPeersResponse, error)
	JoinMeetByUser(context.Context, *JoinMeetRequest) (*BareResponse, error)
	JoinMeetByManager(context.Context, *JoinMeetRequest) (*BareResponse, error)
	CloseMeet(context.Context, *CloseMeetRequest) (*BareResponse, error)
	mustEmbedUnimplementedMeetServiceServer()
}

// UnimplementedMeetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeetServiceServer struct {
}

func (UnimplementedMeetServiceServer) CreateInboundMeet(context.Context, *InboundMeetRequest) (*InboundMeetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInboundMeet not implemented")
}
func (UnimplementedMeetServiceServer) CreateOutboundMeet(context.Context, *OutboundMeetRequest) (*BareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOutboundMeet not implemented")
}
func (UnimplementedMeetServiceServer) LeaveMeetByUser(context.Context, *LeaveMeetRequest) (*BareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveMeetByUser not implemented")
}
func (UnimplementedMeetServiceServer) LeaveMeetByManager(context.Context, *LeaveMeetRequest) (*BareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveMeetByManager not implemented")
}
func (UnimplementedMeetServiceServer) AddPeers(context.Context, *AddPeersRequest) (*AddPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPeers not implemented")
}
func (UnimplementedMeetServiceServer) JoinMeetByUser(context.Context, *JoinMeetRequest) (*BareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinMeetByUser not implemented")
}
func (UnimplementedMeetServiceServer) JoinMeetByManager(context.Context, *JoinMeetRequest) (*BareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinMeetByManager not implemented")
}
func (UnimplementedMeetServiceServer) CloseMeet(context.Context, *CloseMeetRequest) (*BareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseMeet not implemented")
}
func (UnimplementedMeetServiceServer) mustEmbedUnimplementedMeetServiceServer() {}

// UnsafeMeetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeetServiceServer will
// result in compilation errors.
type UnsafeMeetServiceServer interface {
	mustEmbedUnimplementedMeetServiceServer()
}

func RegisterMeetServiceServer(s grpc.ServiceRegistrar, srv MeetServiceServer) {
	s.RegisterService(&MeetService_ServiceDesc, srv)
}

func _MeetService_CreateInboundMeet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InboundMeetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).CreateInboundMeet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meet.MeetService/CreateInboundMeet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).CreateInboundMeet(ctx, req.(*InboundMeetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetService_CreateOutboundMeet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutboundMeetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).CreateOutboundMeet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meet.MeetService/CreateOutboundMeet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).CreateOutboundMeet(ctx, req.(*OutboundMeetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetService_LeaveMeetByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveMeetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).LeaveMeetByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meet.MeetService/LeaveMeetByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).LeaveMeetByUser(ctx, req.(*LeaveMeetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetService_LeaveMeetByManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveMeetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).LeaveMeetByManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meet.MeetService/LeaveMeetByManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).LeaveMeetByManager(ctx, req.(*LeaveMeetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetService_AddPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).AddPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meet.MeetService/AddPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).AddPeers(ctx, req.(*AddPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetService_JoinMeetByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMeetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).JoinMeetByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meet.MeetService/JoinMeetByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).JoinMeetByUser(ctx, req.(*JoinMeetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetService_JoinMeetByManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMeetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).JoinMeetByManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meet.MeetService/JoinMeetByManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).JoinMeetByManager(ctx, req.(*JoinMeetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetService_CloseMeet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseMeetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).CloseMeet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meet.MeetService/CloseMeet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).CloseMeet(ctx, req.(*CloseMeetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeetService_ServiceDesc is the grpc.ServiceDesc for MeetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meet.MeetService",
	HandlerType: (*MeetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInboundMeet",
			Handler:    _MeetService_CreateInboundMeet_Handler,
		},
		{
			MethodName: "CreateOutboundMeet",
			Handler:    _MeetService_CreateOutboundMeet_Handler,
		},
		{
			MethodName: "LeaveMeetByUser",
			Handler:    _MeetService_LeaveMeetByUser_Handler,
		},
		{
			MethodName: "LeaveMeetByManager",
			Handler:    _MeetService_LeaveMeetByManager_Handler,
		},
		{
			MethodName: "AddPeers",
			Handler:    _MeetService_AddPeers_Handler,
		},
		{
			MethodName: "JoinMeetByUser",
			Handler:    _MeetService_JoinMeetByUser_Handler,
		},
		{
			MethodName: "JoinMeetByManager",
			Handler:    _MeetService_JoinMeetByManager_Handler,
		},
		{
			MethodName: "CloseMeet",
			Handler:    _MeetService_CloseMeet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meet/meet.proto",
}
