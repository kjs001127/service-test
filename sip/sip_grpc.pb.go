// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: sip/sip.proto

package sip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SipClient is the client API for Sip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SipClient interface {
	// 전화를 deny 하는 경우 InviteResponse를 보내지 않고 비정상에 따른 rpc response code 를 보냄
	InviteCall(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteResponse, error)
	CancelCall(ctx context.Context, in *SipRequest, opts ...grpc.CallOption) (*SipResponse, error)
	ByeCall(ctx context.Context, in *SipRequest, opts ...grpc.CallOption) (*SipResponse, error)
	GetCallSession(ctx context.Context, in *CallSessionRequest, opts ...grpc.CallOption) (*CallSessionResponse, error)
}

type sipClient struct {
	cc grpc.ClientConnInterface
}

func NewSipClient(cc grpc.ClientConnInterface) SipClient {
	return &sipClient{cc}
}

func (c *sipClient) InviteCall(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteResponse, error) {
	out := new(InviteResponse)
	err := c.cc.Invoke(ctx, "/sip.Sip/InviteCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipClient) CancelCall(ctx context.Context, in *SipRequest, opts ...grpc.CallOption) (*SipResponse, error) {
	out := new(SipResponse)
	err := c.cc.Invoke(ctx, "/sip.Sip/CancelCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipClient) ByeCall(ctx context.Context, in *SipRequest, opts ...grpc.CallOption) (*SipResponse, error) {
	out := new(SipResponse)
	err := c.cc.Invoke(ctx, "/sip.Sip/ByeCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipClient) GetCallSession(ctx context.Context, in *CallSessionRequest, opts ...grpc.CallOption) (*CallSessionResponse, error) {
	out := new(CallSessionResponse)
	err := c.cc.Invoke(ctx, "/sip.Sip/GetCallSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SipServer is the server API for Sip service.
// All implementations must embed UnimplementedSipServer
// for forward compatibility
type SipServer interface {
	// 전화를 deny 하는 경우 InviteResponse를 보내지 않고 비정상에 따른 rpc response code 를 보냄
	InviteCall(context.Context, *InviteRequest) (*InviteResponse, error)
	CancelCall(context.Context, *SipRequest) (*SipResponse, error)
	ByeCall(context.Context, *SipRequest) (*SipResponse, error)
	GetCallSession(context.Context, *CallSessionRequest) (*CallSessionResponse, error)
	mustEmbedUnimplementedSipServer()
}

// UnimplementedSipServer must be embedded to have forward compatible implementations.
type UnimplementedSipServer struct {
}

func (UnimplementedSipServer) InviteCall(context.Context, *InviteRequest) (*InviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteCall not implemented")
}
func (UnimplementedSipServer) CancelCall(context.Context, *SipRequest) (*SipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCall not implemented")
}
func (UnimplementedSipServer) ByeCall(context.Context, *SipRequest) (*SipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByeCall not implemented")
}
func (UnimplementedSipServer) GetCallSession(context.Context, *CallSessionRequest) (*CallSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallSession not implemented")
}
func (UnimplementedSipServer) mustEmbedUnimplementedSipServer() {}

// UnsafeSipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SipServer will
// result in compilation errors.
type UnsafeSipServer interface {
	mustEmbedUnimplementedSipServer()
}

func RegisterSipServer(s grpc.ServiceRegistrar, srv SipServer) {
	s.RegisterService(&Sip_ServiceDesc, srv)
}

func _Sip_InviteCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipServer).InviteCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sip.Sip/InviteCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipServer).InviteCall(ctx, req.(*InviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sip_CancelCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipServer).CancelCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sip.Sip/CancelCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipServer).CancelCall(ctx, req.(*SipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sip_ByeCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipServer).ByeCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sip.Sip/ByeCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipServer).ByeCall(ctx, req.(*SipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sip_GetCallSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipServer).GetCallSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sip.Sip/GetCallSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipServer).GetCallSession(ctx, req.(*CallSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sip_ServiceDesc is the grpc.ServiceDesc for Sip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sip.Sip",
	HandlerType: (*SipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InviteCall",
			Handler:    _Sip_InviteCall_Handler,
		},
		{
			MethodName: "CancelCall",
			Handler:    _Sip_CancelCall_Handler,
		},
		{
			MethodName: "ByeCall",
			Handler:    _Sip_ByeCall_Handler,
		},
		{
			MethodName: "GetCallSession",
			Handler:    _Sip_GetCallSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sip/sip.proto",
}
